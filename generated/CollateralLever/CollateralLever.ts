// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddSupportedCToken extends ethereum.Event {
  get params(): AddSupportedCToken__Params {
    return new AddSupportedCToken__Params(this);
  }
}

export class AddSupportedCToken__Params {
  _event: AddSupportedCToken;

  constructor(event: AddSupportedCToken) {
    this._event = event;
  }

  get cTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClosePositionSucc extends ethereum.Event {
  get params(): ClosePositionSucc__Params {
    return new ClosePositionSucc__Params(this);
  }
}

export class ClosePositionSucc__Params {
  _event: ClosePositionSucc;

  constructor(event: ClosePositionSucc) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenPositionSucc extends ethereum.Event {
  get params(): OpenPositionSucc__Params {
    return new OpenPositionSucc__Params(this);
  }
}

export class OpenPositionSucc__Params {
  _event: OpenPositionSucc;

  constructor(event: OpenPositionSucc) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionInfo(): OpenPositionSuccPositionInfoStruct {
    return changetype<OpenPositionSuccPositionInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class OpenPositionSuccPositionInfoStruct extends ethereum.Tuple {
  get userAddress(): Address {
    return this[0].toAddress();
  }

  get cTokenCollateralAddress(): Address {
    return this[1].toAddress();
  }

  get cTokenBorrowingAddress(): Address {
    return this[2].toAddress();
  }

  get collateralAmountOfCollateralToken(): BigInt {
    return this[3].toBigInt();
  }

  get collateralAmountOfCollateralCToken(): BigInt {
    return this[4].toBigInt();
  }

  get borrowedAmountOfBorrowingToken(): BigInt {
    return this[5].toBigInt();
  }

  get isShort(): boolean {
    return this[6].toBoolean();
  }

  get positionId(): BigInt {
    return this[7].toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollateralLever__s_userAddress2PositionInfosResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getUserAddress(): Address {
    return this.value0;
  }

  getCTokenCollateralAddress(): Address {
    return this.value1;
  }

  getCTokenBorrowingAddress(): Address {
    return this.value2;
  }

  getCollateralAmountOfCollateralToken(): BigInt {
    return this.value3;
  }

  getCollateralAmountOfCollateralCToken(): BigInt {
    return this.value4;
  }

  getBorrowedAmountOfBorrowingToken(): BigInt {
    return this.value5;
  }

  getIsShort(): boolean {
    return this.value6;
  }

  getPositionId(): BigInt {
    return this.value7;
  }
}

export class CollateralLever extends ethereum.SmartContract {
  static bind(address: Address): CollateralLever {
    return new CollateralLever("CollateralLever", address);
  }

  getComptrollerAddress(): Address {
    let result = super.call(
      "getComptrollerAddress",
      "getComptrollerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getComptrollerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getComptrollerAddress",
      "getComptrollerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNextPostionId(): BigInt {
    let result = super.call(
      "getNextPostionId",
      "getNextPostionId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNextPostionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextPostionId",
      "getNextPostionId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUniswapV2FactoryAddress(): Address {
    let result = super.call(
      "getUniswapV2FactoryAddress",
      "getUniswapV2FactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getUniswapV2FactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUniswapV2FactoryAddress",
      "getUniswapV2FactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUniswapV2RouterAddress(): Address {
    let result = super.call(
      "getUniswapV2RouterAddress",
      "getUniswapV2RouterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getUniswapV2RouterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUniswapV2RouterAddress",
      "getUniswapV2RouterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_token2CToken(param0: Address): Address {
    let result = super.call(
      "s_token2CToken",
      "s_token2CToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_s_token2CToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_token2CToken",
      "s_token2CToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_userAddress2PositionInfos(
    param0: Address,
    param1: BigInt
  ): CollateralLever__s_userAddress2PositionInfosResult {
    let result = super.call(
      "s_userAddress2PositionInfos",
      "s_userAddress2PositionInfos(address,uint256):(address,address,address,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new CollateralLever__s_userAddress2PositionInfosResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_s_userAddress2PositionInfos(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<CollateralLever__s_userAddress2PositionInfosResult> {
    let result = super.tryCall(
      "s_userAddress2PositionInfos",
      "s_userAddress2PositionInfos(address,uint256):(address,address,address,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralLever__s_userAddress2PositionInfosResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get uniswapV2Router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uniswapV2Factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get unitroller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSupportedCTokenCall extends ethereum.Call {
  get inputs(): AddSupportedCTokenCall__Inputs {
    return new AddSupportedCTokenCall__Inputs(this);
  }

  get outputs(): AddSupportedCTokenCall__Outputs {
    return new AddSupportedCTokenCall__Outputs(this);
  }
}

export class AddSupportedCTokenCall__Inputs {
  _call: AddSupportedCTokenCall;

  constructor(call: AddSupportedCTokenCall) {
    this._call = call;
  }

  get cTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddSupportedCTokenCall__Outputs {
  _call: AddSupportedCTokenCall;

  constructor(call: AddSupportedCTokenCall) {
    this._call = call;
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get tokenBase(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenQuote(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get investmentAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get investmentIsQuote(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get lever(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get isShort(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UniswapV2CallCall extends ethereum.Call {
  get inputs(): UniswapV2CallCall__Inputs {
    return new UniswapV2CallCall__Inputs(this);
  }

  get outputs(): UniswapV2CallCall__Outputs {
    return new UniswapV2CallCall__Outputs(this);
  }
}

export class UniswapV2CallCall__Inputs {
  _call: UniswapV2CallCall;

  constructor(call: UniswapV2CallCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class UniswapV2CallCall__Outputs {
  _call: UniswapV2CallCall;

  constructor(call: UniswapV2CallCall) {
    this._call = call;
  }
}
